# Assignment 4
# Author: Daniel Bajenov
# Date: Dec 7, 2023

# This defines the Course class, It includes methods 
# for attribute manipulation, error handling for 
# non-negative values, and formatting for displaying course details.

#course.py

class Course:
    # Initialize the Course object with course code, name, students, and fee
    def __init__(self, course_code, course_name, 
                 num_of_students=0, tuition_fee=0):
        self.__course_code = course_code # Store course code
        self.__course_name = course_name # Store course name
        self.__num_of_students = num_of_students # Store number of students
        self.__tuition_fee = tuition_fee # Store tuition fee

    # Getter method to retrieve the course code
    def get_course_code(self):
        return self.__course_code

    # Setter method to set the course code
    def set_course_code(self, course_code):
        self.__course_code = course_code

    # Getter method to retrieve the course name
    def get_course_name(self):
        return self.__course_name

    # Setter method to set the course name
    def set_course_name(self, course_name):
        self.__course_name = course_name

    # Getter method to retrieve the number of students
    def get_num_of_students(self):
        return self.__num_of_students

    # Setter method to set the number of students
    def set_num_of_students(self, num_of_students):
        if num_of_students < 0:
            # Raise exception for negative student count
            raise ValueError("Number of students must be positive!")
        self.__num_of_students = num_of_students # Set the number of students

    # Getter method to retrieve the tuition fee
    def get_tuition_fee(self):
        return self.__tuition_fee
    
    # Setter method to set the tuition fee
    def set_tuition_fee(self, tuition_fee):
        if tuition_fee < 0:
            # Raise exception for negative tuition fee
            raise ValueError("Tuition fee must be positive!")
        self.__tuition_fee = tuition_fee # Set the tuition fee

    # Method to calculate the total tuition amount
    def get_tuition_total(self):
        return self.__num_of_students * self.__tuition_fee

    # Method to format the Course object as a string
    def __str__(self):
        return (f"{self.get_course_code():<13}{self.get_course_name():<13}"
                f"{self.get_num_of_students():<10}{self.get_tuition_fee():<7}"
                f"{self.get_tuition_total():>10,.2f}")


#course_app.py

# Importing the Course class from the course module
from course import Course

# Function to prompt for a course code
def prompt_course_code(prompt):
    return input(prompt)

# Function to prompt for the number of students, also checking
# for exceptions
def prompt_students(prompt):
    while True:
        try:
            return int(input(prompt)) # Convert input to an integer
        except Exception as err:
            print(err) # Display error message if input is not a valid integer

# Function to prompt for the tuition fee, also checking
# for exceptions
def prompt_tuition(prompt):
    while True:
        try:
            return float(input(prompt)) # Convert input to a float
        except Exception as err:
            print(err) # Display error message if input is not a valid integer

# Function to prompt for a course name
def prompt_course_name(prompt):
    return input(prompt)

# Function to print course information in a table
def print_course_info(course):
    print("-----------------------------------------------------")
    print("Course Code  Course Name  Students  Fee     Total")
    print("-----------------------------------------------------")
    print(course) # Print the course details
    print("-----------------------------------------------------")

# Main function to run the program
def main():
    # Prompting for course information
    code = prompt_course_code("Enter course code: ")
    name = prompt_course_name("Enter course name: ")
    students = prompt_students("Enter number of students: ")

    # Checking the number of students (should be positive)
    while students < 0:
        print("Error: Number of students must be positive!")
        students = prompt_students("Enter number of students: ")

    fee = prompt_tuition("Enter tuition fee: ") # Prompt for tuition fee

    # Checking the tuition fee (should be positive)
    while fee < 0:
        print("Error: Tuition fee must be positive!")
        fee = prompt_tuition("Enter tuition fee: ")

     # Creating a Course object with the provided information
    course = Course(code, name, students, fee)
    # Printing the course information in the table
    print_course_info(course)

# Check if the script is run directly and execute the main function
if __name__ == "__main__":
    main()
